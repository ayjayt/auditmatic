#!/bin/bash
if [ "${AUDITMATIC}" == "no" ]; then exit 0; fi 
log() {
	echo $(date  -u)"-$0-$$-$1" >> ${AA_CONFIGDIR}/log
}
export -f log


usage() {
	echo "USAGE: "$'\t'"$(basename $0) [-c CONFIG_DIR] [-a] [-v] [-i SCRIPTNAME]"
	echo "-v : verbose output"
	echo "-s : specify SCRIPTBIN, the folder with scripts"
	echo "-i : specify SCRIPT, the script you want to run"
	echo "-c : specify AA_CONFIGDIR, which stores states such as the last time a script was run"
	echo "-a : do all even if not time yet"
}

verbose() {
	if [ "$AA_VERBOSE" = "true" ]; then
		echo -e "$1"
	fi
}

err() {
	echo "Fatal error: $1"
	exit 1
}

export BOLD="$(tput bold)"
export NORM="$(tput sgr0)"


title() {
	echo -e "\n\n$BOLD*****$1******$NORM\n"
}
export -f title

#exit0 sets the var to true, call it if commplete
function exit0 {
	AA_INT_GOOD_EXIT=true
	exit 0
}

export -f exit0

#write_int just writes the current time to the time stamp file. It's it own function so it can be used with trap
function write_int {
	log "Writing new timestamp to $AA_TIMESTAMP_FILE"
	if [ "$AA_INT_GOOD_EXIT" == "true" ]; then
		echo "$(date +%s)" > $AA_TIMESTAMP_FILE
	fi
	unset AA_TIMESTAMP_FILE
}
export -f write_int

#chk_int checks if a certain amount of time has passed by looking at a timestamp in a file and seeing if its less than the current time minus a specified number of seconds
chk_int() {
	log $1
	log $2
	AA_INT_GOOD_EXIT=true
	# if the file is empty, set it to 0. This forces it to pass mark.
	if [ -z "$(cat "$1")" ]; then
		log "chk_int: no date present"
		echo "0" > "$1"
	fi
	# if it's less than the date minus a number of seconds specified, replace the date and return 0 (success)
	if [ $(cat "$1") -lt $(( $(date +%s) - $(( $2 )) )) ]; then
		export AA_TIMESTAMP_FILE="$1"
		trap write_int EXIT
		log "chk_int: time passed mark"
		return 0
	fi
	log "chk_int: time not passed mark"
	return 1
}
export -f chk_int

pass() {
	echo -n ""
}
export -f pass

chk_all() {
	if [ "$AA_ALL" = "true" ]; then
		return 0
	else
		return 1
	fi
}
export -f chk_all

ORIG_OPTS="${@}"

new_sleeper() {
	AA_SLEEPER="true" ${0} ${ORIG_OPTS} &> /dev/null &
	SLEEPER_PID=$!
	log "Started sleeper ${SLEEPER_PID}"
	echo "${SLEEPER_PID}" > "$AA_CONFIGDIR/sleeper_pid"
	disown ${SLEEPER_PID}
}

while getopts 'i:s:c:va' OPTION; do
	case "$OPTION" in
		s)
			export SCRIPTBIN="${OPTARG}"
			;;
		i)
			export SCRIPT="${OPTARG}"
			;;
		a)
			export AA_ALL=true
			;;
		c)
			export AA_CONFIGDIR="${OPTARG}"
			;;
		v)
				AA_VERBOSE=true
			;;
		?)
			usage
			err "Unrecognized option"
			;;
	esac
done

if [ -z "$AA_CONFIGDIR" ]; then
	export AA_CONFIGDIR="$HOME/.auditmatic"
	if [ ! -d "$AA_CONFIGDIR" ]; then
		mkdir $AA_CONFIGDIR
	fi
fi

mkdir -p $AA_CONFIGDIR

export AA_INTERACTIVE=true


if [ "$AA_SLEEPER" = "true" ]; then
	if chk_int "$AA_CONFIGDIR/ts" "60*60*24 - 1"; then
		log "Waking up"
		AA_SLEEPER=false
		AA_INTERACTIVE=false
	else
		log "Going to sleep..."
		sleep $((60*60*24))
		log "Before exit, start a new sleeper..."
		new_sleeper
		exit 0	
	fi
elif [ -f "$AA_CONFIGDIR/sleeper_pid" ]; then
	log "Killing $(cat ${AA_CONFIGDIR}/sleeper_pid)"
	kill -KILL $(cat "${AA_CONFIGDIR}/sleeper_pid") &> /dev/null
	echo "" > "${AA_CONFIGDIR}/sleeper_pid"
fi
echo "$(date +%s)" > $AA_CONFIGDIR/ts
new_sleeper

verbose "CONFIGDIR=$AA_CONFIGDIR"	
if [ -z "$SCRIPTBIN" ]; then
	if [ -d "$(dirname $(realpath $0))/scripts" ]; then
		export SCRIPTBIN="$(dirname $(realpath $0))/scripts/"
	else
		echo "Searched $(dirname $(realpath $0))/scripts"
		err "This program relies on knowing where the scripts it shoudl run are. It requires either a SCRIPTBIN env var, or looks in the realpath of the executable for a scripts folder"
	fi
fi

if [ "$AA_INTERACTVE" = "false" ]; then
	export SUDOFLAG=' -n '
fi

if [ -z "$SCRIPT" -o "$SCRIPT" = "basic" ]; then
	log "basic"
	${SCRIPTBIN}/basic
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "tmux" ]; then
	log "tmux"
	${SCRIPTBIN}/tmux
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "ufw" ]; then
	log "ufw"
	${SCRIPTBIN}/ufw
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "go" ]; then
	log "go (lastest)"
	${SCRIPTBIN}/go_latest_release 
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "nomad" ]; then
	log "nomad"
	${SCRIPTBIN}/nomad
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "domains" ]; then
	log "domains"
	${SCRIPTBIN}/ssl
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "repos" ]; then
	log "repos"
	${SCRIPTBIN}/find_repos
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "update" ]; then
	log "update"
	${SCRIPTBIN}/update
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "systemstat" ]; then
	log "systemstat"
	${SCRIPTBIN}/system_status
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "logwatch" ]; then
	log "logwatch"
	${SCRIPTBIN}/logwatch
fi
if [ -z "$SCRIPT" -o "$SCRIPT" = "mtail" ]; then
	log "mtail"
	${SCRIPTBIN}/mtail
fi


title Done 

#echo -e "$(tail -n 500 ${AA_CONFIGDIR}/log)" > ${AA_CONFIGDIR}/log
